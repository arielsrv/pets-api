// Code generated by ent, DO NOT EDIT.

package app

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/src/main/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// ProjectId applies equality check predicate on the "projectId" field. It's identical to ProjectIdEQ.
func ProjectId(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectId), v))
	})
}

// AppTypeID applies equality check predicate on the "app_type_id" field. It's identical to AppTypeIDEQ.
func AppTypeID(v int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppTypeID), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ProjectIdEQ applies the EQ predicate on the "projectId" field.
func ProjectIdEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProjectId), v))
	})
}

// ProjectIdNEQ applies the NEQ predicate on the "projectId" field.
func ProjectIdNEQ(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProjectId), v))
	})
}

// ProjectIdIn applies the In predicate on the "projectId" field.
func ProjectIdIn(vs ...int64) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProjectId), v...))
	})
}

// ProjectIdNotIn applies the NotIn predicate on the "projectId" field.
func ProjectIdNotIn(vs ...int64) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProjectId), v...))
	})
}

// ProjectIdGT applies the GT predicate on the "projectId" field.
func ProjectIdGT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProjectId), v))
	})
}

// ProjectIdGTE applies the GTE predicate on the "projectId" field.
func ProjectIdGTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProjectId), v))
	})
}

// ProjectIdLT applies the LT predicate on the "projectId" field.
func ProjectIdLT(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProjectId), v))
	})
}

// ProjectIdLTE applies the LTE predicate on the "projectId" field.
func ProjectIdLTE(v int64) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProjectId), v))
	})
}

// AppTypeIDEQ applies the EQ predicate on the "app_type_id" field.
func AppTypeIDEQ(v int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppTypeID), v))
	})
}

// AppTypeIDNEQ applies the NEQ predicate on the "app_type_id" field.
func AppTypeIDNEQ(v int) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppTypeID), v))
	})
}

// AppTypeIDIn applies the In predicate on the "app_type_id" field.
func AppTypeIDIn(vs ...int) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppTypeID), v...))
	})
}

// AppTypeIDNotIn applies the NotIn predicate on the "app_type_id" field.
func AppTypeIDNotIn(vs ...int) predicate.App {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppTypeID), v...))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// HasAppsTypes applies the HasEdge predicate on the "apps_types" edge.
func HasAppsTypes() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppsTypesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppsTypesTable, AppsTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppsTypesWith applies the HasEdge predicate on the "apps_types" edge with a given conditions (other predicates).
func HasAppsTypesWith(preds ...predicate.AppType) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppsTypesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppsTypesTable, AppsTypesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		p(s.Not())
	})
}
