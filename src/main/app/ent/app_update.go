// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/arielsrv/pets-api/src/main/app/ent/app"
	"github.com/arielsrv/pets-api/src/main/app/ent/apptype"
	"github.com/arielsrv/pets-api/src/main/app/ent/predicate"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks    []Hook
	mutation *AppMutation
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AppUpdate) SetNillableName(s *string) *AppUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetExternalGitlabProjectID sets the "external_gitlab_project_id" field.
func (au *AppUpdate) SetExternalGitlabProjectID(i int64) *AppUpdate {
	au.mutation.ResetExternalGitlabProjectID()
	au.mutation.SetExternalGitlabProjectID(i)
	return au
}

// SetNillableExternalGitlabProjectID sets the "external_gitlab_project_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableExternalGitlabProjectID(i *int64) *AppUpdate {
	if i != nil {
		au.SetExternalGitlabProjectID(*i)
	}
	return au
}

// AddExternalGitlabProjectID adds i to the "external_gitlab_project_id" field.
func (au *AppUpdate) AddExternalGitlabProjectID(i int64) *AppUpdate {
	au.mutation.AddExternalGitlabProjectID(i)
	return au
}

// SetAppTypeID sets the "app_type_id" field.
func (au *AppUpdate) SetAppTypeID(i int) *AppUpdate {
	au.mutation.SetAppTypeID(i)
	return au
}

// SetNillableAppTypeID sets the "app_type_id" field if the given value is not nil.
func (au *AppUpdate) SetNillableAppTypeID(i *int) *AppUpdate {
	if i != nil {
		au.SetAppTypeID(*i)
	}
	return au
}

// SetActive sets the "active" field.
func (au *AppUpdate) SetActive(b bool) *AppUpdate {
	au.mutation.SetActive(b)
	return au
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (au *AppUpdate) SetNillableActive(b *bool) *AppUpdate {
	if b != nil {
		au.SetActive(*b)
	}
	return au
}

// SetAppsTypesID sets the "apps_types" edge to the AppType entity by ID.
func (au *AppUpdate) SetAppsTypesID(id int) *AppUpdate {
	au.mutation.SetAppsTypesID(id)
	return au
}

// SetAppsTypes sets the "apps_types" edge to the AppType entity.
func (au *AppUpdate) SetAppsTypes(a *AppType) *AppUpdate {
	return au.SetAppsTypesID(a.ID)
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// ClearAppsTypes clears the "apps_types" edge to the AppType entity.
func (au *AppUpdate) ClearAppsTypes() *AppUpdate {
	au.mutation.ClearAppsTypes()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppUpdate) check() error {
	if _, ok := au.mutation.AppsTypesID(); au.mutation.AppsTypesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "App.apps_types"`)
	}
	return nil
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.ExternalGitlabProjectID(); ok {
		_spec.SetField(app.FieldExternalGitlabProjectID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedExternalGitlabProjectID(); ok {
		_spec.AddField(app.FieldExternalGitlabProjectID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.Active(); ok {
		_spec.SetField(app.FieldActive, field.TypeBool, value)
	}
	if au.mutation.AppsTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   app.AppsTypesTable,
			Columns: []string{app.AppsTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apptype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AppsTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   app.AppsTypesTable,
			Columns: []string{app.AppsTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apptype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppMutation
}

// SetName sets the "name" field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableName(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetExternalGitlabProjectID sets the "external_gitlab_project_id" field.
func (auo *AppUpdateOne) SetExternalGitlabProjectID(i int64) *AppUpdateOne {
	auo.mutation.ResetExternalGitlabProjectID()
	auo.mutation.SetExternalGitlabProjectID(i)
	return auo
}

// SetNillableExternalGitlabProjectID sets the "external_gitlab_project_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableExternalGitlabProjectID(i *int64) *AppUpdateOne {
	if i != nil {
		auo.SetExternalGitlabProjectID(*i)
	}
	return auo
}

// AddExternalGitlabProjectID adds i to the "external_gitlab_project_id" field.
func (auo *AppUpdateOne) AddExternalGitlabProjectID(i int64) *AppUpdateOne {
	auo.mutation.AddExternalGitlabProjectID(i)
	return auo
}

// SetAppTypeID sets the "app_type_id" field.
func (auo *AppUpdateOne) SetAppTypeID(i int) *AppUpdateOne {
	auo.mutation.SetAppTypeID(i)
	return auo
}

// SetNillableAppTypeID sets the "app_type_id" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableAppTypeID(i *int) *AppUpdateOne {
	if i != nil {
		auo.SetAppTypeID(*i)
	}
	return auo
}

// SetActive sets the "active" field.
func (auo *AppUpdateOne) SetActive(b bool) *AppUpdateOne {
	auo.mutation.SetActive(b)
	return auo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableActive(b *bool) *AppUpdateOne {
	if b != nil {
		auo.SetActive(*b)
	}
	return auo
}

// SetAppsTypesID sets the "apps_types" edge to the AppType entity by ID.
func (auo *AppUpdateOne) SetAppsTypesID(id int) *AppUpdateOne {
	auo.mutation.SetAppsTypesID(id)
	return auo
}

// SetAppsTypes sets the "apps_types" edge to the AppType entity.
func (auo *AppUpdateOne) SetAppsTypes(a *AppType) *AppUpdateOne {
	return auo.SetAppsTypesID(a.ID)
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// ClearAppsTypes clears the "apps_types" edge to the AppType entity.
func (auo *AppUpdateOne) ClearAppsTypes() *AppUpdateOne {
	auo.mutation.ClearAppsTypes()
	return auo
}

// Where appends a list predicates to the AppUpdate builder.
func (auo *AppUpdateOne) Where(ps ...predicate.App) *AppUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppUpdateOne) check() error {
	if _, ok := auo.mutation.AppsTypesID(); auo.mutation.AppsTypesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "App.apps_types"`)
	}
	return nil
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "App.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.ExternalGitlabProjectID(); ok {
		_spec.SetField(app.FieldExternalGitlabProjectID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedExternalGitlabProjectID(); ok {
		_spec.AddField(app.FieldExternalGitlabProjectID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.Active(); ok {
		_spec.SetField(app.FieldActive, field.TypeBool, value)
	}
	if auo.mutation.AppsTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   app.AppsTypesTable,
			Columns: []string{app.AppsTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apptype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AppsTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   app.AppsTypesTable,
			Columns: []string{app.AppsTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apptype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
