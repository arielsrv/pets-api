// Code generated by ent, DO NOT EDIT.

package apptype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the apptype type in the database.
	Label = "app_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeApps holds the string denoting the apps edge name in mutations.
	EdgeApps = "apps"
	// Table holds the table name of the apptype in the database.
	Table = "apps_types"
	// AppsTable is the table that holds the apps relation/edge.
	AppsTable = "apps"
	// AppsInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppsInverseTable = "apps"
	// AppsColumn is the table column denoting the apps relation/edge.
	AppsColumn = "app_type_id"
)

// Columns holds all SQL columns for apptype fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AppType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAppsCount orders the results by apps count.
func ByAppsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppsStep(), opts...)
	}
}

// ByApps orders the results by apps terms.
func ByApps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAppsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AppsTable, AppsColumn),
	)
}
