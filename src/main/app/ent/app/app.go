// Code generated by ent, DO NOT EDIT.

package app

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the app type in the database.
	Label = "app"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldExternalGitlabProjectID holds the string denoting the external_gitlab_project_id field in the database.
	FieldExternalGitlabProjectID = "external_gitlab_project_id"
	// FieldAppTypeID holds the string denoting the app_type_id field in the database.
	FieldAppTypeID = "app_type_id"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgeAppsTypes holds the string denoting the apps_types edge name in mutations.
	EdgeAppsTypes = "apps_types"
	// Table holds the table name of the app in the database.
	Table = "apps"
	// AppsTypesTable is the table that holds the apps_types relation/edge.
	AppsTypesTable = "apps"
	// AppsTypesInverseTable is the table name for the AppType entity.
	// It exists in this package in order to avoid circular dependency with the "apptype" package.
	AppsTypesInverseTable = "apps_types"
	// AppsTypesColumn is the table column denoting the apps_types relation/edge.
	AppsTypesColumn = "app_type_id"
)

// Columns holds all SQL columns for app fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldExternalGitlabProjectID,
	FieldAppTypeID,
	FieldActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the App queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByExternalGitlabProjectID orders the results by the external_gitlab_project_id field.
func ByExternalGitlabProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalGitlabProjectID, opts...).ToFunc()
}

// ByAppTypeID orders the results by the app_type_id field.
func ByAppTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppTypeID, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByAppsTypesField orders the results by apps_types field.
func ByAppsTypesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppsTypesStep(), sql.OrderByField(field, opts...))
	}
}
func newAppsTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppsTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AppsTypesTable, AppsTypesColumn),
	)
}
