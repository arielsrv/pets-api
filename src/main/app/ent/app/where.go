// Code generated by ent, DO NOT EDIT.

package app

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/arielsrv/pets-api/src/main/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.App {
	return predicate.App(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.App {
	return predicate.App(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.App {
	return predicate.App(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.App {
	return predicate.App(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.App {
	return predicate.App(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldName, v))
}

// ExternalGitlabProjectID applies equality check predicate on the "external_gitlab_project_id" field. It's identical to ExternalGitlabProjectIDEQ.
func ExternalGitlabProjectID(v int64) predicate.App {
	return predicate.App(sql.FieldEQ(FieldExternalGitlabProjectID, v))
}

// AppTypeID applies equality check predicate on the "app_type_id" field. It's identical to AppTypeIDEQ.
func AppTypeID(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldAppTypeID, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.App {
	return predicate.App(sql.FieldEQ(FieldActive, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldName, v))
}

// ExternalGitlabProjectIDEQ applies the EQ predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDEQ(v int64) predicate.App {
	return predicate.App(sql.FieldEQ(FieldExternalGitlabProjectID, v))
}

// ExternalGitlabProjectIDNEQ applies the NEQ predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDNEQ(v int64) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldExternalGitlabProjectID, v))
}

// ExternalGitlabProjectIDIn applies the In predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDIn(vs ...int64) predicate.App {
	return predicate.App(sql.FieldIn(FieldExternalGitlabProjectID, vs...))
}

// ExternalGitlabProjectIDNotIn applies the NotIn predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDNotIn(vs ...int64) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldExternalGitlabProjectID, vs...))
}

// ExternalGitlabProjectIDGT applies the GT predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDGT(v int64) predicate.App {
	return predicate.App(sql.FieldGT(FieldExternalGitlabProjectID, v))
}

// ExternalGitlabProjectIDGTE applies the GTE predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDGTE(v int64) predicate.App {
	return predicate.App(sql.FieldGTE(FieldExternalGitlabProjectID, v))
}

// ExternalGitlabProjectIDLT applies the LT predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDLT(v int64) predicate.App {
	return predicate.App(sql.FieldLT(FieldExternalGitlabProjectID, v))
}

// ExternalGitlabProjectIDLTE applies the LTE predicate on the "external_gitlab_project_id" field.
func ExternalGitlabProjectIDLTE(v int64) predicate.App {
	return predicate.App(sql.FieldLTE(FieldExternalGitlabProjectID, v))
}

// AppTypeIDEQ applies the EQ predicate on the "app_type_id" field.
func AppTypeIDEQ(v int) predicate.App {
	return predicate.App(sql.FieldEQ(FieldAppTypeID, v))
}

// AppTypeIDNEQ applies the NEQ predicate on the "app_type_id" field.
func AppTypeIDNEQ(v int) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldAppTypeID, v))
}

// AppTypeIDIn applies the In predicate on the "app_type_id" field.
func AppTypeIDIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldIn(FieldAppTypeID, vs...))
}

// AppTypeIDNotIn applies the NotIn predicate on the "app_type_id" field.
func AppTypeIDNotIn(vs ...int) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldAppTypeID, vs...))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.App {
	return predicate.App(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldActive, v))
}

// HasAppsTypes applies the HasEdge predicate on the "apps_types" edge.
func HasAppsTypes() predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppsTypesTable, AppsTypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppsTypesWith applies the HasEdge predicate on the "apps_types" edge with a given conditions (other predicates).
func HasAppsTypesWith(preds ...predicate.AppType) predicate.App {
	return predicate.App(func(s *sql.Selector) {
		step := newAppsTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(sql.NotPredicates(p))
}
